// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String
  password String @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  merchants Merchant[] @relation("UserMerchants")
   messages    Message[] // Messages sent by this user 
   groupChats  GroupChat[] @relation("GroupChatMembers")
}

model Transaction {
  id String @id @default(uuid())
  userId String
  productId String
  quantity String
  price String
  status String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  product Item @relation(fields: [productId], references: [id])
}
model Merchant {
  id String @id @default(uuid())
  email String @unique
  name String
  shopName String
  password String @default("pass123")
  merchantType String @default("")
  accName String @default("")
  accNo Int @default(0)
  

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  items Item []
  users       User[]     @relation("UserMerchants") // Merchant can have multiple users
  messages    Message[] // Messages sent by this merchant
  groupChats    GroupChat[] @relation("GroupChatMembers")
}

model Message {
  id          String    @id @default(uuid())
  senderId    String    // ID of the sender (User or Merchant)
  receiverId  String    // ID of the receiver (User or Merchant)
  content     String
  createdAt   DateTime  @default(now())

  sender      User?     @relation(fields: [senderId], references: [id])
  receiver    Merchant? @relation(fields: [receiverId], references: [id])
}


model Item {
  id String @id @default(uuid())
  name String
  quantity String
  desc String
  price String
  imagePath String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
  transactions Transaction[]
}

model Admin {
  id String @id @default(uuid())
  email String @unique
  name String
  password String @default("pass123")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupChat {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // Add relation to users
  members     User[]     @relation("GroupChatMembers")
   merchants   Merchant[] @relation("GroupChatMembers")
  messages    GroupMessage[]
}

model GroupMessage {
  id          String    @id @default(uuid())
  groupId     String
  senderId    String
  content     String
  createdAt   DateTime  @default(now())
  groupChat   GroupChat @relation(fields: [groupId], references: [id])
}